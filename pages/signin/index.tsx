import { useState, useEffect } from 'react';

import type { NextPage } from 'next';

import Head from 'next/head';
import Link from 'next/link';

import { signIn } from 'next-auth/react';

import Header from 'components/header/header';
import Footer from 'components/footer/footer';

import styles from './signin.module.scss';

interface User {
	user: {
		id: number;
		username: string;
		password: string;
	}[];
}

const SignIn: NextPage = ({ user }: User) => {
	// Validation
	const [username, setUsername] = useState('');
	const [password, setPassword] = useState('');

	const [usernameError, setUsernameError] = useState('Это обязательное поле.');
	const [passwordError, setPasswordError] = useState('Это обязательное поле.');

	const [invalidUsername, setInvalidUsername] = useState(false);
	const [invalidPassword, setInvalidPassword] = useState(false);

	const [formValid, setFormValid] = useState(false);
	const [signInStatus, setSignInStatus] = useState(false);

	useEffect(() => {
		if (usernameError || passwordError) {
			setFormValid(false);
		} else {
			setFormValid(true);
		}
	}, [usernameError, passwordError]);

	const usernameHandler = (e) => {
		setUsername(e.target.value);
		setUsername(e.target.value);
		if (e.target.value.length < 3 || e.target.value.length > 15) {
			setUsernameError('Это поле должно быть длиной от 3 до 15 символов.');
			if (!e.target.value) {
				setUsernameError('Это поле не может быть пустым.');
			}
		} else {
			setUsernameError('');
		}
	};

	const passwordHandler = (e) => {
		setPassword(e.target.value);
		if (e.target.value.length < 4 || e.target.value.length > 16) {
			setPasswordError('Это поле должно быть длиной от 4 до 16 символов.');
			if (!e.target.value) {
				setPasswordError('Это поле не может быть пустым.');
			}
		} else {
			setPasswordError('');
		}
	};

	const blurHandler = (e) => {
		switch (e.target.name) {
			case 'email':
				setInvalidUsername(true);
			case 'password':
				setInvalidPassword(true);
		}
	};

	const handleGithubSignIn = async () => {
		signIn('guthub', { callbackUrl: 'http://localhost:3000/user?tab=profile' });
	};

	return (
		<div className="container">
			<Head>
				<title>Авторизация</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<Header />

			<main className={styles.main}>
				<div className={styles.auth}>
					<h1>Авторизация</h1>
					<span>Имя</span>
					<div className={styles.input}>
						<input
							onChange={(e) => usernameHandler(e)}
							value={username}
							onBlur={(e) => blurHandler(e)}
							name="email"
							type="text"
							placeholder="username"
						/>
						{invalidUsername && usernameError && <p>{usernameError}</p>}
					</div>
					<span>Пароль</span>
					<div className={styles.input}>
						<input
							onChange={(e) => passwordHandler(e)}
							value={password}
							onBlur={(e) => blurHandler(e)}
							name="password"
							type="password"
							placeholder="password"
						/>
						{invalidPassword && passwordError && <p>{passwordError}</p>}
					</div>
					<button
						onClick={handleGithubSignIn}
						disabled={!formValid}
						type="submit"
					>
						Авторизация
					</button>
					<div className={styles.sign__up}>
						<small>Нет аккаунта? Создайте его</small>
						<Link href="/signup">здесь</Link>.
					</div>
					<div className={styles.auth__another_option}>
						<hr />
						<small>или</small>
						<hr />
					</div>
					<div className={styles.social__buttons}>
						<button className={styles.social__button}>Gmail</button>
						<button
							className={styles.social__button}
							onClick={handleGithubSignIn}
						>
							Github
						</button>
					</div>
				</div>
			</main>

			<Footer />
		</div>
	);
};

export default SignIn;

import { useState, useEffect } from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';
import Link from 'next/link';

import Header from 'components/header/header';
import Footer from 'components/footer/footer';

import axios from 'axios';

import styles from 'styles/auth.module.scss';

const signIn: NextPage = () => {
	// Validation
	const [email, setEmail] = useState('');
	const [password, setPassword] = useState('');

	const [emailError, setEmailError] = useState('Это обязательное поле.');
	const [passwordError, setPasswordError] = useState('Это обязательное поле.');

	const [invalidEmail, setInvalidEmail] = useState(false);
	const [invalidPassword, setInvalidPassword] = useState(false);

	const [formValid, setFormValid] = useState(false);

	useEffect(() => {
		if (emailError || passwordError) {
			setFormValid(false);
		} else {
			setFormValid(true);
		}
	}, [emailError, passwordError]);

	const emailHandler = (e) => {
		setEmail(e.target.value);
		const regexp =
			/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
		if (!regexp.test(String(e.target.value).toLowerCase())) {
			setEmailError('Некорректный email.');
		} else {
			setEmailError('');
		}
	};

	const passwordHandler = (e) => {
		setPassword(e.target.value);
		if (e.target.value.length < 4 || e.target.value.length > 16) {
			setPasswordError('Это поле должно быть длиной от 4 до 16 символов.');
			if (!e.target.value) {
				setPasswordError('Это поле не может быть пустым.');
			}
		} else {
			setPasswordError('');
		}
	};

	const blurHandler = (e) => {
		switch (e.target.name) {
			case 'email':
				setInvalidEmail(true);
			case 'password':
				setInvalidPassword(true);
		}
	};

	const handleSubmit = async (e) => {
		e.preventDefault();

		try {
			const res = await axios.post('http://localhost:3000/api/auth', email);
			console.log(res);
		} catch (error) {
			console.log(error);
		}
	};
	//

	// Get data

	const [dataResponse, setDataResponse] = useState([]);

	useEffect(() => {
		const getPageData = async () => {
			const apiUrlEndpoint = `http://localhost:3000/api/auth`;
			const response = await fetch(apiUrlEndpoint);
			const user = await response.json();
			console.log(user);
			setDataResponse(user);
		};
		getPageData();
	}, []);

	return (
		<div className="container">
			<Head>
				<title>Авторизация</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<Header />

			<main className={styles.main}>
				<div className={styles.auth}>
					<h1>Авторизация</h1>
					<span>Имя</span>
					<div className={styles.input}>
						<input
							onBlur={(e) => blurHandler(e)}
							name="username"
							type="text"
							placeholder="username"
						/>
						{invalidEmail && emailError && <p>{emailError}</p>}
					</div>
					<span>Пароль</span>
					<div className={styles.input}>
						<input
							onChange={(e) => passwordHandler(e)}
							value={password}
							onBlur={(e) => blurHandler(e)}
							name="password"
							type="password"
							placeholder="password"
						/>
						{invalidPassword && passwordError && <p>{passwordError}</p>}
					</div>
					<button onClick={handleSubmit} disabled={!formValid} type="submit">
						Авторизация
					</button>
					<Link href="/signUp"><a>Зарегистрироваться</a></Link>
				</div>
			</main>

			<Footer />
		</div>
	);
};

export default signIn;
